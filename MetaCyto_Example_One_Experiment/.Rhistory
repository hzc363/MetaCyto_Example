all_data$label==L)
MA=metaAnalysis(value="value",variableOfInterst="SUBJECT_AGE",main=L,
otherVariables=c("GENDER"),studyID="study_id",
data=dat,CILevel=0.95,ifScale=c(T,F))
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_Meta_ImmPort/Code/step5_meta_analysis.R')
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_Meta_ImmPort/Code/oneRun.R')
wd=getwd()
if(grepl("MetaCyto_Example_Meta_Local$",wd)==F){print("Please change the working directory to 'MetaCyto_Example'")}
fcs_info=read.csv("Data/fcs_info.csv")
print(fcs_info)
sample_info=read.csv("Data/sample_info.csv")
print(sample_info)
# If you want to associate fcs data with some phenotype or genotype data, such as age, gender or SNP,
# you need to collect the sample information as well, like the one below.
#  The fcs_files column specifies the location of the fcs files.
# Other two columns specifies teh age and gender of each subject corresponding to each fcs file.
sample_info=read.csv("Data/sample_info.csv")
print(sample_info)
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_Meta_Local/Code/step2_data_preprocessing.R')
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_Meta_Local/Code/step2_data_preprocessing.R')
library(MetaCyto)
library(dplyr)
# The purpose of this step is to make sure that the marker names are consistent between
# studies. This is immportant for combining data later.
#########################################
########## Examine the Panels ##########
########################################
# collect data output from the step1.
files=list.files("Result",pattern="processed_sample",recursive=T,full.names=T)
panel_info=collectData(files,longform=F)
# summarize markers in all markers. The panel summary is written to "Result" Folder
PS=panelSummary(panel_info,"Result",cluster=F,width=30,height=20)
###################################
########## Updata Names ##########
##################################
# CD8 is called "CD8B" in one study and is called "CD8" in another.
# Here, we change CD8B to CD8 for consistency.
ab_names=sort(rownames(PS))
ab_names
nameUpdator("CD8B","CD8",files)
panel_info=collectData(files,longform=F)
PS=panelSummary(panel_info,"Result",cluster=F,width=30,height=20)
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_Meta_Local/Code/step4_clustering.R')
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_Meta_Local/Code/step5_meta_analysis.R')
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_Meta_Local/Code/oneRun.R')
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_One_Experiment/Code/step1_data_collection.R')
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_One_Experiment/Code/step1_data_collection.R')
library(dplyr)
library(tidyr)
library(MetaCyto)
# This example is a light weighted example of how to use MetaCyto to  analyze cytometry data from one experiment.
###################################################
########## Check working directory first ##########
###################################################
wd=getwd()
if(grepl("MetaCyto_Example_Meta_Local$",wd)==F){print("Please change the working directory to 'MetaCyto_Example'")}
#############################################
########## Collect data Manually  ##########
############################################
# If you want to associate fcs data with some phenotype or genotype data, such as age, gender or SNP,
# you need to collect the sample information as well, like the one below.
#  The fcs_files column specifies the location of the fcs files.
# Other two columns specifies the age and gender of each subject corresponding to each fcs file.
# you can include whatever sample information in the table.
sample_info=read.csv("Data/sample_info.csv")
print(sample_info)
wd=getwd()
if(grepl("MetaCyto_Example_One_Experiment$",wd)==F){print("Please change the working directory to 'MetaCyto_Example'")}
wd
sample_info=read.csv("Data/sample_info.csv")
print(sample_info)
files = list.files("Data",pattern="fcs$",full.names=T)
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_One_Experiment/Code/step2_data_preprocessing.R')
fcs
cluster_list=flowSOM.MC(fcsFrame=fcs,
excludeClusterParameters=c("FSC-A","FSC-W","FSC-H","SSC-A","SSC-W","SSC-H","Time"))
cluster_list
cluster_label=labelCluster(fcsFrame=fcs,
clusterList=cluster_list,
excludeClusterParameters=c("FSC-A","FSC-W","FSC-H","SSC-A","SSC-W","SSC-H","Time"),
minPercent=0.01,
labelQuantile=0.95)
cluster_label
# Find the clusters
clus_MC=searchCluster(fcsFrame=fcs,
clusterLabel=cluster_label$clusterLabel,
cutoff=cluster_label$cutoff)
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_One_Experiment/Code/step2_data_preprocessing.R')
library(dplyr)
library(tidyr)
library(MetaCyto)
# This example is a light weighted example of how to use MetaCyto to  analyze cytometry data from one experiment.
###################################################
########## Check working directory first ##########
###################################################
wd=getwd()
if(grepl("MetaCyto_Example_One_Experiment$",wd)==F){print("Please change the working directory to 'MetaCyto_Example'")}
#############################################
########## Collect data Manually  ##########
############################################
# If you want to associate fcs data with some phenotype or genotype data, such as age, gender or SNP,
# you need to collect the sample information as well, like the one below.
#  The fcs_files column specifies the location of the fcs files.
# Other two columns specifies the age and gender of each subject corresponding to each fcs file.
# you can include whatever sample information in the table.
sample_info=read.csv("Data/sample_info.csv")
print(sample_info)
#############################################
########## Perform preprossessing ##########
############################################
files = list.files("Data",pattern="fcs$",full.names=T)
fcs = preprocessing(fcsFiles=files,
assay = "FCM",
b = 1/150,
fileSampleSize=1000,
excludeTransformParameters = c("FSC-A", "FSC-W", "FSC-H", "Time", "Cell_length"))
#######################################
########## Cluster the Data ##########
######################################
# cluster using flowSOM.MC
cluster_list=flowSOM.MC(fcsFrame=fcs,
excludeClusterParameters=c("FSC-A","FSC-W","FSC-H","SSC-A","SSC-W","SSC-H","Time"))
# label each clusters
cluster_label=labelCluster(fcsFrame=fcs,
clusterList=cluster_list,
excludeClusterParameters=c("FSC-A","FSC-W","FSC-H","SSC-A","SSC-W","SSC-H","Time"),
minPercent=0.01,
labelQuantile=0.95)
# Add a user-defined label (CCR7+ CD8+ T cells) to the cluster_label. This step allows users
# to include their favorate cell type into the analysis.
cluster_label$clusterLabel=c(cluster_label$clusterLabel,"CD3+|CD4-|CD8+|CCR7+")
# Find the hyper-ractangle clusters
cluster_list=searchCluster(fcsFrame=fcs,
clusterLabel=cluster_label$clusterLabel,
cutoff=cluster_label$cutoff)
clusterStats=clusterStats(fcsFrame=fcs,
clusterList=cluster_list$clusterList,
fcsNames=files)
clusterStats
cluster_stats=clusterStats(fcsFrame=fcs,
clusterList=cluster_list$clusterList,
fcsNames=files)
sub_data=inner_join(sub_data,sample_info,by="fcs_files")
sub_data=subset(cluster_stats,cluster_stats$label=="CD3+|CD4-|CD8+|CCR7+")
sub_data=inner_join(sub_data,sample_info,by="fcs_files")
sub_data=inner_join(sub_data,sample_info,by=c("file_names"="fcs_files"))
sub_data=inner_join(sub_data,sample_info,by=c("fcs_names"="fcs_files"))
plot(sub_data$SUBJECT_AGE,sub_data$fraction,xlab="AGE",ylab="Proportion of CCR7+ CD8+ T cells")
sub_data
sub_data=subset(cluster_stats,cluster_stats$label=="CD3+|CD4-|CD8+|CCR7+")
sub_data=inner_join(sub_data,sample_info,by=c("fcs_names"="fcs_files"))
sub_data
cluster_stats=clusterStats(fcsFrame=fcs,
clusterList=cluster_list$clusterList,
fcsNames=files)
cluster_stats
sub_data=subset(cluster_stats,cluster_stats$label=="CD3+|CD4-|CD8+|CCR7+")
sub_data
cluster_stats$label
cluster_label$clusterLabel
cluster_list=searchCluster(fcsFrame=fcs,
clusterLabel=cluster_label$clusterLabel,
cutoff=cluster_label$cutoff)
cluster_stats=clusterStats(fcsFrame=fcs,
clusterList=cluster_list$clusterList,
fcsNames=files)
sub_data=subset(cluster_stats,cluster_stats$label=="CD3+|CD4-|CD8+|CCR7+")
sub_data
unique(cluster_stats$label)
cluster_label$clusterLabel=c(cluster_label$clusterLabel,"CD3+|CD4-|CD8B+|CCR7+")
cluster_list=searchCluster(fcsFrame=fcs,
clusterLabel=cluster_label$clusterLabel,
cutoff=cluster_label$cutoff)
cluster_stats=clusterStats(fcsFrame=fcs,
clusterList=cluster_list$clusterList,
fcsNames=files)
sub_data=subset(cluster_stats,cluster_stats$label=="CD3+|CD4-|CD8B+|CCR7+")
sub_data=inner_join(sub_data,sample_info,by=c("fcs_names"="fcs_files"))
plot(sub_data$SUBJECT_AGE,sub_data$fraction,xlab="AGE",ylab="Proportion of CCR7+ CD8+ T cells")
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_One_Experiment/Code/Example_Code_One_Experiment.R')
p=ggplot(data=sub_data,aes(x=SUBJECT_AGE,y=fraction))+
geom_point()+
geom_smooth(method="lm")
plot(p)
p=ggplot(data=sub_data,aes(x=SUBJECT_AGE,y=fraction))+
geom_point()+
geom_smooth(method="lm")+
title("CCR7+ CD8+ T cells")
plot(p)
p=ggplot(data=sub_data,aes(x=SUBJECT_AGE,y=fraction))+
geom_point()+
geom_smooth(method="lm")+
geom_tile("CCR7+ CD8+ T cells")
p=ggplot(data=sub_data,aes(x=SUBJECT_AGE,y=fraction))+
geom_point()+
geom_smooth(method="lm")+
ggtile("CCR7+ CD8+ T cells")
p=ggplot(data=sub_data,aes(x=SUBJECT_AGE,y=fraction))+
geom_point()+
geom_smooth(method="lm")+
ggtitle("CCR7+ CD8+ T cells")
plot(p)
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_One_Experiment/Code/Example_Code_One_Experiment.R')
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_One_Experiment/Code/Example_Code_One_Experiment.R')
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_One_Experiment/Code/Example_Code_One_Experiment.R')
files = list.files("Data",pattern="fcs$",full.names=T)
fcs = preprocessing(fcsFiles=files,
assay = "FCM",
b = 1/150,
fileSampleSize=1000,
excludeTransformParameters = c("FSC-A", "FSC-W", "FSC-H", "Time", "Cell_length"))
library(MetaCyto)
files = list.files("Data",pattern="fcs$",full.names=T)
fcs = preprocessing(fcsFiles=files,
assay = "FCM",
b = 1/150,
fileSampleSize=1000,
excludeTransformParameters = c("FSC-A", "FSC-W", "FSC-H", "Time", "Cell_length"))
x = exprs(fcs)
names(x)
colnames(x)
library(MetaCyto)
files=list.files("Data",pattern="fcs$",full.names=T)
fcs=preprocessing(fcsFiles=files,
assay="FCM",
b=1/150,
fileSampleSize=1000,
excludeTransformParameters=c("FSC-A","FSC-W","FSC-H","Time","Cell_length"))
fcs=preprocessing(fcsFiles=files,
assay="FCM",
b=1/150,
fileSampleSize=1000,
excludeTransformParameters=c("FSC-A","FSC-W","FSC-H","Time","Cell_length"))
x=exprs(fcs)[,c("CD11A","CD4","CD16","CD28","CD95","CD3","CD62L","CD8B","CCR7")]
SM=silMap(x)
silMap=function(x){
###Clusterx###
D=dist(x)
HC=fastcluster::hclust(d=D,method="ward.D2")
###FindbestK###
ave_silh=c(NA)
ss_old=-Inf
j=0
for(kin2:nrow(x)){
CL=cutree(HC,k)
ss<-cluster::silhouette(CL,D)
ss=mean(ss[,3])
ave_silh=c(ave_silh,ss)
if(ss<ss_old){j=j+1}else{j=0}
if(j>20){break}
ss_old=ss
}
best_K=which.max(ave_silh)
CL=cutree(HC,best_K)
###Findthetransformation###
#Firstdefinethefunctiontominimize
Tr=1:ncol(x)%%2
Tr=c(Tr,(1-Tr))
f=function(Tr){
Tr=matrix(Tr,ncol=2)
y=x%*%Tr
D=dist(y)
ss<-cluster::silhouette(CL,D)
ss=mean(ss[,3])
return(-ss)
}
#Thendefinetheequalfunction
equal<-function(Tr){
L=length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
#solveforthetransformation
OPT=Rsolnp::solnp(Tr,f,equal,eqB=0)
Tr=matrix(OPT$pars,ncol=2)
NM=apply(Tr,2,norm,type="2")
Tr=Tr%*%(diag(1/NM))
y=x%*%Tr
LST=list("y"=y,"cluster"=CL,"tranformation"=Tr)
return(LST)
}
library(MetaCyto)
files = list.files("Data",pattern="fcs$",full.names=T)
fcs = preprocessing(fcsFiles=files,
assay = "FCM",
b = 1/150,
fileSampleSize=1000,
excludeTransformParameters = c("FSC-A", "FSC-W", "FSC-H", "Time", "Cell_length"))
names(x)
x=exprs(fcs)
colnames(x)
library(MetaCyto)
files = list.files("Data",pattern="fcs$",full.names=T)
fcs = preprocessing(fcsFiles=files,
assay = "FCM",
b = 1/150,
fileSampleSize=1000,
excludeTransformParameters = c("FSC-A", "FSC-W", "FSC-H", "Time", "Cell_length"))
x=exprs(fcs)
x=x[,c("CD11A","CD4","CD16","CD28",
"CD95","CD3","CD62L","CD8B","CCR7")]
x=as.matrix(x)
SM = silMap(x)
silMap = function(x){
### Cluster x ###
D=dist(x)
HC = fastcluster::hclust(d=D,method = "ward.D2")
### Find best K ###
ave_silh = c(NA)
ss_old=-Inf
j=0
for(k in 2:nrow(x)){
CL=cutree(HC,k)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
ave_silh=c(ave_silh,ss)
if(ss<ss_old){j=j+1}else{j=0}
if(j>20){break}
ss_old=ss
}
best_K = which.max(ave_silh)
CL=cutree(HC,best_K)
### Find the transformation ###
# First define the function to minimize
Tr = 1:ncol(x)%%2
Tr = c(Tr, (1-Tr))
f=function(Tr){
Tr = matrix(Tr,ncol = 2)
y = x%*%Tr
D = dist(y)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
return(-ss)
}
# Then define the equal function
equal <- function(Tr) {
L = length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
# solve for the transformation
OPT = Rsolnp::solnp(Tr,f,equal,eqB=0)
Tr = matrix(OPT$pars,ncol=2)
NM = apply(Tr,2,norm,type="2")
Tr = Tr%*%(diag(1/NM))
y = x%*%Tr
LST = list("y"=y,"cluster"=CL,"tranformation"=Tr)
return(LST)
}
SM = silMap(x)
source('~/Desktop/max_cluster.R')
plot(x[,1:2])
PCA = pca(x)
x.pca <- prcomp(x,
center = TRUE,
scale. = TRUE)
x.pca
x.pca <- prcomp(x,
center = TRUE,
scale. = TRUE)
x.pca
x.pca <- prcomp(t(x),
center = TRUE,
scale. = TRUE)
x.pca
x.pca <- prcomp(x,
center = TRUE,
scale. = TRUE)
x.pca$x
plot(x.pca$x[,"PC1"],x.pca$x[,"PC2"])
plot(SM$y)
plot(x.pca$x[,"PC1"],x.pca$x[,"PC2"],col=SM$cluster)
plot(x.pca$x[,"PC1"],x.pca$x[,"PC3"],col=SM$cluster)
source('~/Desktop/max_cluster.R')
DM = distMap(x)
D=as.vector(dist(x))
Tr = 1:ncol(x)%%2
Tr = c(Tr, (1-Tr))
f=function(Tr){
Tr = matrix(Tr,ncol = 2)
y = x%*%Tr
D2 = as.vector(dist(y))
ss=cor(D,D2,method = "spearman")
return(-ss)
}
equal <- function(Tr) {
L = length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
OPT = Rsolnp::solnp(Tr,f,equal,eqB=0)
ss=cor(D,D2,method = "pearson")
f=function(Tr){
Tr = matrix(Tr,ncol = 2)
y = x%*%Tr
D2 = as.vector(dist(y))
ss=cor(D,D2,method = "pearson")
return(-ss)
}
equal <- function(Tr) {
L = length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
OPT = Rsolnp::solnp(Tr,f,equal,eqB=0)
DM = distMap(x)
silMap = function(x){
### Cluster x ###
D=dist(x)
HC = fastcluster::hclust(d=D,method = "ward.D2")
### Find best K ###
ave_silh = c(NA)
ss_old=-Inf
j=0
for(k in 2:nrow(x)){
CL=cutree(HC,k)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
ave_silh=c(ave_silh,ss)
if(ss<ss_old){j=j+1}else{j=0}
if(j>20){break}
ss_old=ss
}
best_K = which.max(ave_silh)
CL=cutree(HC,best_K)
### Find the transformation ###
# First define the function to minimize
Tr = 1:ncol(x)%%2
Tr = c(Tr, (1-Tr))
f=function(Tr){
Tr = matrix(Tr,ncol = 2)
y = x%*%Tr
D = dist(y)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
return(-ss)
}
# Then define the equal function
equal <- function(Tr) {
L = length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
# solve for the transformation
OPT = Rsolnp::solnp(Tr,f,equal,eqB=0)
Tr = matrix(OPT$pars,ncol=2)
NM = apply(Tr,2,norm,type="2")
Tr = Tr%*%(diag(1/NM))
y = x%*%Tr
LST = list("y"=y,"cluster"=CL,"tranformation"=Tr)
return(LST)
}
distMap= function(x){
# First define the function to minimize
D=as.vector(dist(x))
Tr = 1:ncol(x)%%2
Tr = c(Tr, (1-Tr))
f=function(Tr){
Tr = matrix(Tr,ncol = 2)
y = x%*%Tr
D2 = as.vector(dist(y))
ss=cor(D,D2,method = "pearson")
return(-ss)
}
# Then define the equal function
equal <- function(Tr) {
L = length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
# solve for the transformation
OPT = Rsolnp::solnp(Tr,f,equal,eqB=0)
Tr = matrix(OPT$pars,ncol=2)
NM = apply(Tr,2,norm,type="2")
Tr = Tr%*%(diag(1/NM))
y = x%*%Tr
LST = list("y"=y,"tranformation"=Tr)
return(LST)
}
DM = distMap(x)
tSNE_result = Rtsne(x,perplexity=30)
library(Rtsne)
tSNE_result = Rtsne(x,perplexity=30)
plot(tSNE_result)
tSNE_result$Y
plot(tSNE_result$Y)
d2=as.vector(dist(tSNE_result$Y))
d1=as.vector(dist(x))
plot(d2,d1)
cor(d2,d1)
d2=as.vector(dist(x.pca$x[,1:2]))
d1=as.vector(dist(x))
cor(d2,d1)
cor(d2,d1,method = "spearman")
d2=as.vector(dist(tSNE_result$Y))
d1=as.vector(dist(x))
cor(d2,d1)
cor(d2,d1,method = "spearman")
d2=as.vector(dist(SM$y))
d1=as.vector(dist(x))
cor(d2,d1)
cor(d2,d1,method = "spearman")
d2=as.vector(dist(tSNE_result$Y))
d1=as.vector(dist(x))
plot(d2[1:1000],d1[1:1000])
cor(d2,d1)
cor(d2,d1,method = "spearman")
d2=as.vector(dist(x.pca$x[,1:2]))
d1=as.vector(dist(x))
plot(d2[1:1000],d1[1:1000])
cor(d2,d1)
cor(d2,d1,method = "spearman")
d2=as.vector(dist(SM$y))
d1=as.vector(dist(x))
plot(d2[1:1000],d1[1:1000])
cor(d2,d1)
cor(d2,d1,method = "spearman")
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_One_Experiment/Code/Example_Code_One_Experiment.R')
