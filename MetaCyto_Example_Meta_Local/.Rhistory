sum_var = cumsum(x.pca^2)/sum(x.pca^2)
sum_var = cumsum(x.pca$sdev^2)/sum(x.pca$sdev^2)
sum_var
sumVar=0.9
max(NA,2)
max(NULL,2)
x.pca <- prcomp(x,center = TRUE,scale. = TRUE)
sum_var = cumsum(x.pca$sdev^2)/sum(x.pca$sdev^2)
w = which(sum_var>sumVar)-1
w=max(w,2,na.rm=T)
x=x.pca$x[,1:w]
sum_var
w
D=dist(x)
HC = fastcluster::hclust(d=D,method = "ward.D2")
if(is.null(k)&is.null(cluster)){
ave_silh = c(NA)
ss_old=-Inf
j=0
for(k in 2:nrow(x)){
CL=cutree(HC,k)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
ave_silh=c(ave_silh,ss)
if(ss<ss_old){j=j+1}else{j=0}
if(j>10){break}
ss_old=ss
}
best_K = which.max(ave_silh)
CL=cutree(HC,best_K)
}else if(!is.null(k)&is.null(cluster)){
CL=cutree(HC,k)
}else if(!is.null(cluster)){
CL=cluster
}
Tr = 1:ncol(x)%%2
Tr = c(Tr, (1-Tr))
f=function(Tr){
Tr = matrix(Tr,ncol = 2)
NM = apply(Tr,2,norm,type="2")
Tr = Tr%*%(diag(1/NM))
y = x%*%Tr
D = dist(y)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
return(-ss)
}
equal <- function(Tr) {
L = length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
OPT = Rsolnp::solnp(Tr,f,equal,eqB=0)
k
ave_silh = c(NA)
ss_old=-Inf
j=0
for(k in 2:nrow(x)){
CL=cutree(HC,k)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
ave_silh=c(ave_silh,ss)
if(ss<ss_old){j=j+1}else{j=0}
if(j>10){break}
ss_old=ss
}
best_K = which.max(ave_silh)
CL=cutree(HC,best_K)
Tr = 1:ncol(x)%%2
Tr = c(Tr, (1-Tr))
f=function(Tr){
Tr = matrix(Tr,ncol = 2)
NM = apply(Tr,2,norm,type="2")
Tr = Tr%*%(diag(1/NM))
y = x%*%Tr
D = dist(y)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
return(-ss)
}
equal <- function(Tr) {
L = length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
OPT = Rsolnp::solnp(Tr,f,equal,eqB=0)
best_K
ncol(x)
1:ncol(x)%%2
silMap = function(x,k=NULL,cluster=NULL,sumVar=0.90){
x.pca <- prcomp(x,center = TRUE,scale. = TRUE)
sum_var = cumsum(x.pca$sdev^2)/sum(x.pca$sdev^2)
w = which(sum_var>sumVar)-1
w=max(w,2,na.rm=T)
x=x.pca$x[,1:w]
### Cluster x ###
D=dist(x)
HC = fastcluster::hclust(d=D,method = "ward.D2")
### Find best K ###
if(is.null(k)&is.null(cluster)){
ave_silh = c(NA)
ss_old=-Inf
j=0
for(k in 2:nrow(x)){
CL=cutree(HC,k)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
ave_silh=c(ave_silh,ss)
if(ss<ss_old){j=j+1}else{j=0}
if(j>10){break}
ss_old=ss
}
best_K = which.max(ave_silh)
CL=cutree(HC,best_K)
}else if(!is.null(k)&is.null(cluster)){
CL=cutree(HC,k)
}else if(!is.null(cluster)){
CL=cluster
}
### Find the transformation ###
# First define the function to minimize
Tr = 1:ncol(x)%%2
Tr = c(Tr, (1-Tr))
f=function(Tr){
Tr = matrix(Tr,ncol = 2)
NM = apply(Tr,2,norm,type="2")
Tr = Tr%*%(diag(1/NM))
y = x%*%Tr
D = dist(y)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
return(-ss)
}
# Then define the equal function
equal <- function(Tr) {
L = length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
# solve for the transformation
OPT = Rsolnp::solnp(Tr,f,equal,eqB=0)
Tr = matrix(OPT$pars,ncol=2)
NM = apply(Tr,2,norm,type="2")
Tr = Tr%*%(diag(1/NM))
y = x%*%Tr
LST = list("y"=y,"cluster"=CL,"tranformation"=Tr)
return(LST)
}
library(MetaCyto)
files = list.files("Data/Study1",pattern="fcs$",full.names=T)
fcs = preprocessing(fcsFiles=files,
assay = "FCM",
b = 1/5,
fileSampleSize=1000,
excludeTransformParameters = c("FSC-A", "FSC-W", "FSC-H", "Time", "Cell_length"))
x=exprs(fcs)
x=x[1:1000,!colnames(x)%in%c("TIME","CELL_LENGTH","DNA1","DNA2","sample_id" )]
x=as.matrix(x)
SM = silMap(x)
x.pca <- prcomp(x,center = TRUE,scale. = TRUE)
sum_var = cumsum(x.pca$sdev^2)/sum(x.pca$sdev^2)
sum_var
w = which(sum_var>sumVar)-1
w=max(w,2,na.rm=T)
w
x=x.pca$x[,1:w]
x[1:5,]
D=dist(x)
D
D[1:5,1:5]
as.matrix(D)[1:5,1:5]
HC = fastcluster::hclust(d=D,method = "ward.D2")
ave_silh = c(NA)
ss_old=-Inf
j=0
for(k in 2:nrow(x)){
CL=cutree(HC,k)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
ave_silh=c(ave_silh,ss)
if(ss<ss_old){j=j+1}else{j=0}
if(j>10){break}
ss_old=ss
}
best_K = which.max(ave_silh)
CL=cutree(HC,best_K)
plot(x[,1],x[,2])
Tr = 1:ncol(x)%%2
Tr = c(Tr, (1-Tr))
Tr = matrix(Tr,ncol = 2)
NM = apply(Tr,2,norm,type="2")
Tr = Tr%*%(diag(1/NM))
Tr
y = x%*%Tr
plot(y[,1],y[,2])
Tr = matrix(Tr,ncol = 2)
NM = apply(Tr,2,norm,type="2")
Tr = Tr%*%(diag(1/NM))
y = x%*%Tr
D = dist(y)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
ss
Tr
x;1:5,
x[1:5]
x[1:5,]
Tr = 1:ncol(x)%%2 * (x.pca$sdev)^2
Tr = 1:ncol(x)%%2 * (x.pca$sdev[1:w])^2
Tr = c(Tr, (1-Tr)* (x.pca$sdev[1:w])^2)
f=function(Tr){
Tr = matrix(Tr,ncol = 2)
NM = apply(Tr,2,norm,type="2")
Tr = Tr%*%(diag(1/NM))
y = x%*%Tr
D = dist(y)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
return(-ss)
}
equal <- function(Tr) {
L = length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
OPT = Rsolnp::solnp(Tr,f,equal,eqB=0)
Tr = 1:ncol(x)%%2 * x.pca$sdev[1:w]
Tr = c(Tr, (1-Tr)* x.pca$sdev[1:w])
f=function(Tr){
Tr = matrix(Tr,ncol = 2)
NM = apply(Tr,2,norm,type="2")
Tr = Tr%*%(diag(1/NM))
y = x%*%Tr
D = dist(y)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
return(-ss)
}
equal <- function(Tr) {
L = length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
OPT = Rsolnp::solnp(Tr,f,equal,eqB=0)
tmp <- rnorm(4)
tmp.qr <- qr(tmp)
tmp.qr
tmp
tmp <- rnorm(4)
tmp
tmp.qr <- qr(tmp)
tmp%*%tmp.qr
tmp%*%t(tmp.qr)
t(tmp)%*%(tmp.qr)
tmp <- rnorm(4)
tmp.qr <- qr(tmp)
t(tmp)%*%(tmp.qr$qr)
source('~/.active-rstudio-document')
t(tmp)%*%(tmp.qr$qr)
t(tmp)%*%t(tmp.qr$qr)
(tmp)%*%t(tmp.qr$qr)
Tr=pracma::rortho(ncol(x))[,1:2]
Tr=pracma::randortho(ncol(x))[,1:2]
f=function(Tr){
Tr = matrix(Tr,ncol = 2)
NM = apply(Tr,2,norm,type="2")
Tr = Tr%*%(diag(1/NM))
y = x%*%Tr
D = dist(y)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
return(-ss)
}
equal <- function(Tr) {
L = length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
OPT = Rsolnp::solnp(Tr,f,equal,eqB=0)
silMap = function(x,k=NULL,cluster=NULL){
### Cluster x ###
D=dist(x)
HC = fastcluster::hclust(d=D,method = "ward.D2")
### Find best K ###
if(is.null(k)&is.null(cluster)){
ave_silh = c(NA)
ss_old=-Inf
j=0
for(k in 2:nrow(x)){
CL=cutree(HC,k)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
ave_silh=c(ave_silh,ss)
if(ss<ss_old){j=j+1}else{j=0}
if(j>10){break}
ss_old=ss
}
best_K = which.max(ave_silh)
CL=cutree(HC,best_K)
}else if(!is.null(k)&is.null(cluster)){
CL=cutree(HC,k)
}else if(!is.null(cluster)){
CL=cluster
}
### Find the transformation ###
# First define the function to minimize
#Tr = 1:ncol(x)%%2
#Tr = c(Tr, (1-Tr))
Tr=pracma::randortho(ncol(x))[,1:2]
f=function(Tr){
Tr = matrix(Tr,ncol = 2)
y = x%*%Tr
D = dist(y)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
return(-ss)
}
# Then define the equal function
equal <- function(Tr) {
L = length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
# solve for the transformation
OPT = Rsolnp::solnp(Tr,f,equal,eqB=0)
Tr = matrix(OPT$pars,ncol=2)
NM = apply(Tr,2,norm,type="2")
Tr = Tr%*%(diag(1/NM))
y = x%*%Tr
LST = list("y"=y,"cluster"=CL,"tranformation"=Tr)
return(LST)
}
library(MetaCyto)
files = list.files("Data/Study1",pattern="fcs$",full.names=T)
fcs = preprocessing(fcsFiles=files,
assay = "FCM",
b = 1/5,
fileSampleSize=1000,
excludeTransformParameters = c("FSC-A", "FSC-W", "FSC-H", "Time", "Cell_length"))
x=exprs(fcs)
x=x[1:1000,!colnames(x)%in%c("TIME","CELL_LENGTH","DNA1","DNA2","sample_id" )]
x=as.matrix(x)
SM = silMap(x)
D=dist(x)
HC = fastcluster::hclust(d=D,method = "ward.D2")
if(is.null(k)&is.null(cluster)){
ave_silh = c(NA)
ss_old=-Inf
j=0
for(k in 2:nrow(x)){
CL=cutree(HC,k)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
ave_silh=c(ave_silh,ss)
if(ss<ss_old){j=j+1}else{j=0}
if(j>10){break}
ss_old=ss
}
best_K = which.max(ave_silh)
CL=cutree(HC,best_K)
}else if(!is.null(k)&is.null(cluster)){
CL=cutree(HC,k)
}else if(!is.null(cluster)){
CL=cluster
}
ave_silh = c(NA)
ss_old=-Inf
j=0
for(k in 2:nrow(x)){
CL=cutree(HC,k)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
ave_silh=c(ave_silh,ss)
if(ss<ss_old){j=j+1}else{j=0}
if(j>10){break}
ss_old=ss
}
best_K = which.max(ave_silh)
CL=cutree(HC,best_K)
Tr=pracma::randortho(ncol(x))[,1:2]
Tr=as.vector(pracma::randortho(ncol(x))[,1:2])
f=function(Tr){
Tr = matrix(Tr,ncol = 2)
y = x%*%Tr
D = dist(y)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
return(-ss)
}
equal <- function(Tr) {
L = length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
OPT = Rsolnp::solnp(Tr,f,equal,eqB=0)
Tr=pracma::randortho(ncol(x))[,1:2]
Tr
fcs
ncol(x)
library(MetaCyto)
files = list.files("Data/Study1",pattern="fcs$",full.names=T)
fcs = preprocessing(fcsFiles=files,
assay = "FCM",
b = 1/5,
fileSampleSize=1000,
excludeTransformParameters = c("FSC-A", "FSC-W", "FSC-H", "Time", "Cell_length"))
x=exprs(fcs)
x=x[1:1000,!colnames(x)%in%c("TIME","CELL_LENGTH","DNA1","DNA2","sample_id" )]
x=as.matrix(x)
dim(x)
Tr=pracma::randortho(ncol(x))[,1:2]
Tr[,1]%*%Tr[,2]
Tr = 1:ncol(x)%%2
Tr = c(Tr, (1-Tr))
f=function(Tr){
Tr = matrix(Tr,ncol = 2)
y = x%*%Tr
D = dist(y)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
return(-ss)
}
equal <- function(Tr) {
L = length(Tr)/2
Tr[1:L]%*%Tr[(L+1):2L]
}
OPT = Rsolnp::solnp(Tr,f,equal,eqB=0)
Tr = matrix(OPT$pars,ncol=2)
NM = apply(Tr,2,norm,type="2")
Tr = Tr%*%(diag(1/NM))
y = x%*%Tr
LST = list("y"=y,"cluster"=CL,"tranformation"=Tr)
Tr = matrix(Tr,ncol = 2)
y = x%*%Tr
D = dist(y)
ss <- cluster::silhouette(CL,D)
ss[1:5,]
ss=aggregate(ss[, 3], ss[,1], mean)
ss=aggregate(ss[, 3], list(ss[,1]), mean)
ss = mean(ss[, 3])
ss
source('~/.active-rstudio-document')
mean(ss)
Tr = matrix(Tr,ncol = 2)
y = x%*%Tr
D = dist(y)
D=dist(x)
HC = fastcluster::hclust(d=D,method = "ward.D2")
ave_silh = c(NA)
ss_old=-Inf
j=0
for(k in 2:nrow(x)){
CL=cutree(HC,k)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
ave_silh=c(ave_silh,ss)
if(ss<ss_old){j=j+1}else{j=0}
if(j>10){break}
ss_old=ss
}
best_K = which.max(ave_silh)
CL=cutree(HC,best_K)
if(is.null(k)&is.null(cluster)){
ave_silh = c(NA)
ss_old=-Inf
j=0
for(k in 2:nrow(x)){
CL=cutree(HC,k)
ss <- cluster::silhouette(CL,D)
ss = mean(ss[, 3])
ave_silh=c(ave_silh,ss)
if(ss<ss_old){j=j+1}else{j=0}
if(j>10){break}
ss_old=ss
}
best_K = which.max(ave_silh)
CL=cutree(HC,best_K)
}else if(!is.null(k)&is.null(cluster)){
CL=cutree(HC,k)
}else if(!is.null(cluster)){
CL=cluster
}
Tr = 1:ncol(x)%%2
Tr = c(Tr, (1-Tr))
Tr = matrix(Tr,ncol = 2)
y = x%*%Tr
D = dist(y)
ss <- cluster::silhouette(CL,D)
ss=aggregate(ss[, 3], list(ss[,1]), mean)
ss
ss = mean(ss[,2])
source('~/.active-rstudio-document')
library(MetaCyto)
files = list.files("Data/Study1",pattern="fcs$",full.names=T)
fcs = preprocessing(fcsFiles=files,
assay = "FCM",
b = 1/5,
fileSampleSize=1000,
excludeTransformParameters = c("FSC-A", "FSC-W", "FSC-H", "Time", "Cell_length"))
x=exprs(fcs)
x=x[1:1000,!colnames(x)%in%c("TIME","CELL_LENGTH","DNA1","DNA2","sample_id" )]
x=as.matrix(x)
SM = silMap(x,k=10)
plot(SM$y,col=SM$cluster)
plot(SM$y[SM$cluster==1,])
plot(SM$y[SM$cluster==2,])
plot(SM$y[SM$cluster==3,])
plot(SM$y[SM$cluster==4,])
plot(SM$y[SM$cluster==5,])
plot(SM$y[SM$cluster==6,])
t1=as.data.frame(SM$y)
names(t1)=c("x","y")
t1=cbind(t1,x,"cluster"=SM$cluster)
p=ggplot(data=t1,aes(x=x,y=y,col=cluster))+
geom_point()
print(p)
p=ggplot(data=t1,aes(x=x,y=y,col=factor(cluster)))+
geom_point()
print(p)
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Example_Meta_Local/Code/oneRun.R')
